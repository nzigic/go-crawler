// Code generated by gotsrpc https://github.com/foomo/gotsrpc  - DO NOT EDIT.

package crawler

import (
	tls "crypto/tls"
	gob "encoding/gob"
	fmt "fmt"
	reflect "reflect"
	strings "strings"
	time "time"

	gotsrpc "github.com/foomo/gotsrpc"
	gorpc "github.com/valyala/gorpc"
)

type (
	CrawlerServiceGoRPCProxy struct {
		server           *gorpc.Server
		service          *CrawlerService
		callStatsHandler gotsrpc.GoRPCCallStatsHandlerFun
	}

	CrawlerServiceCrawlRequest struct {
		RootUrl string
	}
	CrawlerServiceCrawlResponse struct {
		R []CrawlResult
	}
)

func init() {
	gob.Register(CrawlerServiceCrawlRequest{})
	gob.Register(CrawlerServiceCrawlResponse{})
}

func NewCrawlerServiceGoRPCProxy(addr string, service *CrawlerService, tlsConfig *tls.Config) *CrawlerServiceGoRPCProxy {
	proxy := &CrawlerServiceGoRPCProxy{
		service: service,
	}

	if tlsConfig != nil {
		proxy.server = gorpc.NewTLSServer(addr, proxy.handler, tlsConfig)
	} else {
		proxy.server = gorpc.NewTCPServer(addr, proxy.handler)
	}

	return proxy
}

func (p *CrawlerServiceGoRPCProxy) Start() error {
	return p.server.Start()
}

func (p *CrawlerServiceGoRPCProxy) Serve() error {
	return p.server.Serve()
}

func (p *CrawlerServiceGoRPCProxy) Stop() {
	p.server.Stop()
}

func (p *CrawlerServiceGoRPCProxy) SetCallStatsHandler(handler gotsrpc.GoRPCCallStatsHandlerFun) {
	p.callStatsHandler = handler
}

func (p *CrawlerServiceGoRPCProxy) handler(clientAddr string, request interface{}) (response interface{}) {
	start := time.Now()

	reqType := reflect.TypeOf(request).String()
	funcNameParts := strings.Split(reqType, ".")
	funcName := funcNameParts[len(funcNameParts)-1]

	switch funcName {
	case "CrawlerServiceCrawlRequest":
		req := request.(CrawlerServiceCrawlRequest)
		r := p.service.Crawl(req.RootUrl)
		response = CrawlerServiceCrawlResponse{R: r}
	default:
		fmt.Println("Unkown request type", reflect.TypeOf(request).String())
	}

	if p.callStatsHandler != nil {
		p.callStatsHandler(&gotsrpc.CallStats{
			Func:      funcName,
			Package:   "crawler/services/crawler",
			Service:   "CrawlerService",
			Execution: time.Since(start),
		})
	}

	return
}
